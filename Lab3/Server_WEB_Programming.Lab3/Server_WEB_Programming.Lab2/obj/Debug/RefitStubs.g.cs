// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using System.Threading.Tasks;
using Refit;
using Server_WEB_Programming.Lab2.Dal.Entities;
using Server_WEB_Programming.Lab2.ViewModels;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace Server_WEB_Programming.Lab2.RefitInternalGenerated
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

namespace Server_WEB_Programming.Lab2.ApiServices
{
    using Server_WEB_Programming.Lab2.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIBookApiService : IBookApiService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIBookApiService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<IReadOnlyCollection<Book>> IBookApiService.GetAsync()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAsync", new Type[] {  });
            return (Task<IReadOnlyCollection<Book>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<Book> IBookApiService.GetAsync(int id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAsync", new Type[] { typeof(int) });
            return (Task<Book>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IBookApiService.PostAsync(BookCreateViewModel book, string authorization)
        {
            var arguments = new object[] { book, authorization };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostAsync", new Type[] { typeof(BookCreateViewModel), typeof(string) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IBookApiService.PutAsync(int id, BookUpdateViewModel book, string authorization)
        {
            var arguments = new object[] { id, book, authorization };
            var func = requestBuilder.BuildRestResultFuncForMethod("PutAsync", new Type[] { typeof(int), typeof(BookUpdateViewModel), typeof(string) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IBookApiService.DeleteAsync(int id, string authorization)
        {
            var arguments = new object[] { id, authorization };
            var func = requestBuilder.BuildRestResultFuncForMethod("DeleteAsync", new Type[] { typeof(int), typeof(string) });
            return (Task)func(Client, arguments);
        }
    }
}

namespace Server_WEB_Programming.Lab2.ApiServices
{
    using Server_WEB_Programming.Lab2.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIBookOrderApiService : IBookOrderApiService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIBookOrderApiService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<IReadOnlyCollection<BookOrder>> IBookOrderApiService.GetAsync()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAsync", new Type[] {  });
            return (Task<IReadOnlyCollection<BookOrder>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IBookOrderApiService.PostAsync(IEnumerable<BookOrder> bookOrder)
        {
            var arguments = new object[] { bookOrder };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostAsync", new Type[] { typeof(IEnumerable<BookOrder>) });
            return (Task)func(Client, arguments);
        }
    }
}

namespace Server_WEB_Programming.Lab2.ApiServices
{
    using Server_WEB_Programming.Lab2.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedISageApiService : ISageApiService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedISageApiService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<IReadOnlyCollection<Sage>> ISageApiService.GetAsync()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAsync", new Type[] {  });
            return (Task<IReadOnlyCollection<Sage>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<Sage> ISageApiService.GetAsync(int id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAsync", new Type[] { typeof(int) });
            return (Task<Sage>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task ISageApiService.PostAsync(SageCreateViewModel sage)
        {
            var arguments = new object[] { sage };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostAsync", new Type[] { typeof(SageCreateViewModel) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task ISageApiService.PutAsync(int id, SageUpdateViewModel sage)
        {
            var arguments = new object[] { id, sage };
            var func = requestBuilder.BuildRestResultFuncForMethod("PutAsync", new Type[] { typeof(int), typeof(SageUpdateViewModel) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task ISageApiService.DeleteAsync(int id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("DeleteAsync", new Type[] { typeof(int) });
            return (Task)func(Client, arguments);
        }
    }
}
